<!-- Hero Section -->
<div class="hero-section mb-5">
    <div class="row align-items-center">
        <div class="col-lg-8">
            <div class="hero-content">
                <h1 class="display-4 fw-bold text-gradient mb-3">
                    <i class="bi bi-cloud-upload me-3"></i>Cargar Archivos
                </h1>
                <p class="lead text-muted mb-4">
                    Importa datos de estudiantes y cursos desde archivos Excel, CSV, PDF o TXT
                </p>
            </div>
        </div>
    </div>
</div>

<!-- Contenedor Principal -->
<div class="row">
    <!-- Panel de Carga de Archivos -->
    <div class="col-lg-8">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">
                    <i class="bi bi-file-earmark-arrow-up me-2"></i>Seleccionar Archivo
                </h5>
            </div>
            <div class="card-body p-4">
                <!-- Zona de Drop -->
                <div class="upload-zone" id="uploadZone">
                    <div class="upload-content text-center">
                        <i class="bi bi-cloud-upload upload-icon"></i>
                        <h4 class="mt-3 mb-2">Arrastra tu archivo aquí</h4>
                        <p class="text-muted mb-3">o haz clic para seleccionar</p>
                        <input type="file" id="fileInput" class="d-none" accept=".xlsx,.xls,.csv,.pdf,.txt">
                        <button class="btn btn-outline-primary" onclick="document.getElementById('fileInput').click()">
                            <i class="bi bi-folder2-open me-2"></i>Seleccionar Archivo
                        </button>
                        <div class="mt-3">
                            <small class="text-muted">
                                Formatos soportados: Excel (.xlsx, .xls), CSV (.csv), PDF (.pdf), TXT (.txt)
                            </small>
                        </div>
                    </div>
                </div>

                <!-- Información del Archivo Seleccionado -->
                <div id="fileInfo" class="mt-4" style="display: none;">
                    <div class="card border-success">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <h6 class="card-title text-success">
                                        <i class="bi bi-file-check me-2"></i>Archivo Seleccionado
                                    </h6>
                                    <p class="mb-1" id="fileName"></p>
                                    <small class="text-muted" id="fileSize"></small>
                                </div>
                                <div class="col-md-4 text-end">
                                    <button class="btn btn-success me-2" id="processBtn">
                                        <i class="bi bi-gear me-2"></i>Procesar
                                    </button>
                                    <button class="btn btn-outline-secondary" id="removeFileBtn">
                                        <i class="bi bi-x-circle me-2"></i>Quitar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Progreso de Procesamiento -->
                <div id="processingInfo" class="mt-4" style="display: none;">
                    <div class="card border-info">
                        <div class="card-body">
                            <h6 class="card-title text-info">
                                <i class="bi bi-hourglass-split me-2"></i>Procesando Archivo
                            </h6>
                            <div class="progress mb-3">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" style="width: 0%" id="progressBar"></div>
                            </div>
                            <p class="mb-0" id="processingStatus">Iniciando procesamiento...</p>
                        </div>
                    </div>
                </div>

                <!-- Resultados del Procesamiento -->
                <div id="processingResults" class="mt-4" style="display: none;">
                    <div class="card border-success">
                        <div class="card-header bg-success text-white">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-check-circle me-2"></i>Procesamiento Completado
                            </h6>
                        </div>
                        <div class="card-body">
                            <div id="resultsContent">
                                <!-- Los resultados se cargarán aquí dinámicamente -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Panel de Información -->
    <div class="col-lg-4">
        <div class="card shadow">
            <div class="card-header bg-info text-white">
                <h5 class="card-title mb-0">
                    <i class="bi bi-info-circle me-2"></i>Información
                </h5>
            </div>
            <div class="card-body">
                <h6 class="text-primary">Tipos de Archivos Soportados</h6>
                <ul class="list-unstyled">
                    <li><i class="bi bi-file-earmark-excel text-success me-2"></i>Excel (.xlsx, .xls)</li>
                    <li><i class="bi bi-file-earmark-text text-primary me-2"></i>CSV (.csv)</li>
                    <li><i class="bi bi-file-earmark-pdf text-danger me-2"></i>PDF (.pdf)</li>
                    <li><i class="bi bi-file-earmark-text text-secondary me-2"></i>TXT (.txt)</li>
                </ul>

                <h6 class="text-primary mt-4">Tipos de Contenido Detectados</h6>
                <div class="alert alert-light">
                    <strong>Archivos con Cursos + Alumnos:</strong>
                    <ul class="mb-0 mt-2">
                        <li>Lista de cursos con sus estudiantes</li>
                        <li>Información de materias por curso</li>
                        <li>Datos de profesores asignados</li>
                    </ul>
                </div>
                
                <div class="alert alert-light">
                    <strong>Solo Alumnos:</strong>
                    <ul class="mb-0 mt-2">
                        <li>Lista de estudiantes</li>
                        <li>Información personal básica</li>
                        <li>Asignación manual a cursos</li>
                    </ul>
                </div>

                <h6 class="text-primary mt-4">Datos Detectados Automáticamente</h6>
                <ul class="list-unstyled">
                    <li><i class="bi bi-person-check text-success me-2"></i>Nombres y apellidos</li>
                    <li><i class="bi bi-card-text text-primary me-2"></i>DNI/Número de documento</li>
                    <li><i class="bi bi-book text-info me-2"></i>Materias y calificaciones</li>
                    <li><i class="bi bi-building text-warning me-2"></i>Cursos y divisiones</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Confirmación -->
<div class="modal fade" id="confirmProcessModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Procesamiento</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas procesar este archivo?</p>
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    El sistema detectará automáticamente el tipo de contenido y procesará los datos en consecuencia.
                </div>
                <div id="filePreview" class="mt-3">
                    <!-- Vista previa del archivo se cargará aquí -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmProcessBtn">
                    <i class="bi bi-gear me-2"></i>Procesar Archivo
                </button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const uploadZone = document.getElementById('uploadZone');
    const fileInput = document.getElementById('fileInput');
    const fileInfo = document.getElementById('fileInfo');
    const processingInfo = document.getElementById('processingInfo');
    const processingResults = document.getElementById('processingResults');
    const processBtn = document.getElementById('processBtn');
    const removeFileBtn = document.getElementById('removeFileBtn');
    const confirmProcessModal = new bootstrap.Modal(document.getElementById('confirmProcessModal'));
    const confirmProcessBtn = document.getElementById('confirmProcessBtn');
    
    let selectedFile = null;

    // Drag and Drop
    uploadZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadZone.classList.add('drag-over');
    });

    uploadZone.addEventListener('dragleave', () => {
        uploadZone.classList.remove('drag-over');
    });

    uploadZone.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadZone.classList.remove('drag-over');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFileSelect(files[0]);
        }
    });

    // Click to select file
    uploadZone.addEventListener('click', () => {
        fileInput.click();
    });

    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleFileSelect(e.target.files[0]);
        }
    });

    function handleFileSelect(file) {
        // Validar tipo de archivo
        const allowedTypes = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel',
            'text/csv',
            'application/pdf',
            'text/plain'
        ];
        
        const allowedExtensions = ['.xlsx', '.xls', '.csv', '.pdf', '.txt'];
        const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
        
        if (!allowedTypes.includes(file.type) && !allowedExtensions.includes(fileExtension)) {
            showAlert('Tipo de archivo no soportado. Por favor selecciona un archivo Excel, CSV, PDF o TXT.', 'danger');
            return;
        }

        // Validar tamaño (25MB máximo)
        if (file.size > 25 * 1024 * 1024) {
            showAlert('El archivo es demasiado grande. El tamaño máximo permitido es 25MB.', 'danger');
            return;
        }

        selectedFile = file;
        showFileInfo(file);
    }

    function showFileInfo(file) {
        document.getElementById('fileName').textContent = file.name;
        document.getElementById('fileSize').textContent = formatFileSize(file.size);
        fileInfo.style.display = 'block';
    }

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Procesar archivo
    processBtn.addEventListener('click', () => {
        if (selectedFile) {
            showConfirmModal();
        }
    });

    function showConfirmModal() {
        const filePreview = document.getElementById('filePreview');
        filePreview.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="bi bi-file-earmark me-3" style="font-size: 2rem;"></i>
                <div>
                    <strong>${selectedFile.name}</strong><br>
                    <small class="text-muted">${formatFileSize(selectedFile.size)}</small>
                </div>
            </div>
        `;
        confirmProcessModal.show();
    }

    confirmProcessBtn.addEventListener('click', () => {
        confirmProcessModal.hide();
        processFile();
    });

    function processFile() {
        if (!selectedFile) return;

        // Mostrar información de procesamiento
        processingInfo.style.display = 'block';
        fileInfo.style.display = 'none';
        
        const formData = new FormData();
        formData.append('file', selectedFile);
        formData.append('schoolId', '{{school.id}}');

        // Simular progreso
        let progress = 0;
        const progressBar = document.getElementById('progressBar');
        const statusText = document.getElementById('processingStatus');
        
        const progressInterval = setInterval(() => {
            progress += Math.random() * 20;
            if (progress > 90) progress = 90;
            progressBar.style.width = progress + '%';
        }, 500);

        // Enviar archivo
        fetch('/files/upload', {
            method: 'POST',
            body: formData,
            credentials: 'include'
        })
        .then(response => response.json())
        .then(data => {
            clearInterval(progressInterval);
            progressBar.style.width = '100%';
            statusText.textContent = 'Procesamiento completado';
            
            setTimeout(() => {
                showResults(data);
            }, 1000);
        })
        .catch(error => {
            clearInterval(progressInterval);
            console.error('Error:', error);
            showAlert('Error al procesar el archivo. Intenta de nuevo.', 'danger');
            processingInfo.style.display = 'none';
            fileInfo.style.display = 'block';
        });
    }

    function showResults(data) {
        processingInfo.style.display = 'none';
        processingResults.style.display = 'block';
        
        const resultsContent = document.getElementById('resultsContent');
        resultsContent.innerHTML = generateResultsHTML(data);
    }

    function generateResultsHTML(data) {
        let html = '<div class="row">';
        
        if (data.courses && data.courses.length > 0) {
            html += `
                <div class="col-md-6">
                    <h6 class="text-success"><i class="bi bi-book me-2"></i>Cursos Detectados</h6>
                    <ul class="list-group list-group-flush">
                        ${data.courses.map(course => `
                            <li class="list-group-item d-flex justify-content-between">
                                <span>${course.name}</span>
                                <span class="badge bg-primary">${course.students_count} estudiantes</span>
                            </li>
                        `).join('')}
                    </ul>
                </div>
            `;
        }
        
        if (data.students && data.students.length > 0) {
            html += `
                <div class="col-md-6">
                    <h6 class="text-info"><i class="bi bi-people me-2"></i>Estudiantes Detectados</h6>
                    <ul class="list-group list-group-flush">
                        ${data.students.slice(0, 5).map(student => `
                            <li class="list-group-item d-flex justify-content-between">
                                <span>${student.first_name} ${student.last_name}</span>
                                <small class="text-muted">${student.dni || 'Sin DNI'}</small>
                            </li>
                        `).join('')}
                        ${data.students.length > 5 ? `<li class="list-group-item text-center text-muted">... y ${data.students.length - 5} más</li>` : ''}
                    </ul>
                </div>
            `;
        }
        
        html += '</div>';
        
        if (data.errors && data.errors.length > 0) {
            html += `
                <div class="mt-3">
                    <h6 class="text-warning"><i class="bi bi-exclamation-triangle me-2"></i>Advertencias</h6>
                    <ul class="list-group list-group-flush">
                        ${data.errors.map(error => `
                            <li class="list-group-item text-warning">${error}</li>
                        `).join('')}
                    </ul>
                </div>
            `;
        }
        
        html += `
            <div class="mt-4 text-center">
                <button class="btn btn-success me-2" onclick="confirmImport()">
                    <i class="bi bi-check-circle me-2"></i>Confirmar Importación
                </button>
                <button class="btn btn-outline-secondary" onclick="resetUpload()">
                    <i class="bi bi-arrow-clockwise me-2"></i>Cargar Otro Archivo
                </button>
            </div>
        `;
        
        return html;
    }

    // Quitar archivo
    removeFileBtn.addEventListener('click', () => {
        selectedFile = null;
        fileInput.value = '';
        fileInfo.style.display = 'none';
        processingInfo.style.display = 'none';
        processingResults.style.display = 'none';
    });

    function showAlert(message, type) {
        // Remover alertas existentes
        const existingAlerts = document.querySelectorAll('.alert');
        existingAlerts.forEach(alert => alert.remove());
        
        const alertContainer = document.querySelector('.card-body');
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alert.innerHTML = `
            <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        alertContainer.insertBefore(alert, alertContainer.firstChild);
    }

    // Funciones globales para los botones de resultados
    window.confirmImport = function() {
        showAlert('Importación confirmada. Los datos se han guardado correctamente.', 'success');
        resetUpload();
    };

    window.resetUpload = function() {
        selectedFile = null;
        fileInput.value = '';
        fileInfo.style.display = 'none';
        processingInfo.style.display = 'none';
        processingResults.style.display = 'none';
    };
});
</script>

<style>
.upload-zone {
    border: 2px dashed #dee2e6;
    border-radius: 10px;
    padding: 3rem;
    text-align: center;
    transition: all 0.3s ease;
    cursor: pointer;
}

.upload-zone:hover,
.upload-zone.drag-over {
    border-color: #0d6efd;
    background-color: #f8f9fa;
}

.upload-icon {
    font-size: 4rem;
    color: #6c757d;
}

.upload-zone:hover .upload-icon {
    color: #0d6efd;
}
</style>
